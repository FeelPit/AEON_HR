import pytest
from fastapi.testclient import TestClient
from app.main import app
import json
import types
from datetime import timedelta

client = TestClient(app)

def test_get_test():
    response = client.get("/test/1")
    assert response.status_code == 200
    data = response.json()
    assert data["id"] == 1
    assert data["title"] == "–¢–µ—Å—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é"
    assert len(data["questions"]) == 2

def test_submit_answers():
    payload = {
        "answers": [
            {"question_id": 1, "answer_id": 1},  # –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
            {"question_id": 2, "answer_id": 2}   # –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        ]
    }
    response = client.post("/test/1/submit", json=payload)
    assert response.status_code == 200
    data = response.json()
    assert "result_id" in data

def test_get_result():
    response = client.get("/result/1")
    assert response.status_code == 200
    data = response.json()
    assert data["score"] == 50
    assert "–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö" in data["details"]

def test_autosave_answers():
    payload = {
        "answers": [
            {"question_id": 1, "answer_id": 2},
            {"question_id": 2, "answer_id": 3}
        ]
    }
    response = client.post("/test/1/autosave", json=payload)
    assert response.status_code == 204

def test_get_test_ru():
    response = client.get("/test/1?lang=ru")
    assert response.status_code == 200
    data = response.json()
    assert data["title"] == "–¢–µ—Å—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é"
    assert "—è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è" in data["questions"][0]["text"]

def test_get_test_en():
    response = client.get("/test/1?lang=en")
    assert response.status_code == 200
    data = response.json()
    assert data["title"] == "Programming Test"
    assert "programming language" in data["questions"][0]["text"]

def test_session_lifecycle():
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    response = client.post("/session")
    assert response.status_code == 200
    token = response.json()["token"]

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    answer = {"question_id": 1, "answer_id": 2}
    response = client.post(f"/session/{token}/answer", json=answer)
    assert response.status_code == 200
    assert response.json()["status"] == "saved"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
    response = client.get(f"/session/{token}")
    assert response.status_code == 200
    data = response.json()
    assert data["answers"][0] == answer

def test_stats():
    # –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    response = client.post("/session")
    token = response.json()["token"]
    client.post(f"/session/{token}/answer", json={"question_id": 1, "answer_id": 2})

    response = client.get("/stats")
    assert response.status_code == 200
    data = response.json()
    assert data["sessions"] >= 1
    assert data["answers"] >= 1
    assert "avg_score" in data

def test_generate_glyph(monkeypatch):
    # –ú–æ–∫–∞–µ–º httpx.AsyncClient.post
    class MockResponse:
        def raise_for_status(self):
            pass
        def json(self):
            return {"choices": [{"message": {"content": json.dumps({"glyph": "üß¨", "profile": "Test profile"})}}]}
    class MockAsyncClient:
        async def __aenter__(self):
            return self
        async def __aexit__(self, exc_type, exc, tb):
            pass
        async def post(self, *args, **kwargs):
            return MockResponse()
    monkeypatch.setattr("httpx.AsyncClient", MockAsyncClient)

    payload = {
        "results": [
            {"question": "–í–æ–ø—Ä–æ—Å 1", "answer": "–û—Ç–≤–µ—Ç 1"},
            {"question": "–í–æ–ø—Ä–æ—Å 2", "answer": "–û—Ç–≤–µ—Ç 2"}
        ]
    }
    response = client.post("/aeon/glyph", json=payload)
    assert response.status_code == 200
    data = response.json()
    assert "glyph" in data
    assert "profile" in data

def mock_openai(monkeypatch, content):
    class MockResponse:
        def raise_for_status(self):
            pass
        def json(self):
            return {"choices": [{"message": {"content": content}}]}
    class MockAsyncClient:
        async def __aenter__(self):
            return self
        async def __aexit__(self, exc_type, exc, tb):
            pass
        async def post(self, *args, **kwargs):
            return MockResponse()
    monkeypatch.setattr("httpx.AsyncClient", MockAsyncClient)

def test_aeon_next_question(monkeypatch):
    mock_openai(monkeypatch, '{"question": "–ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è?", "type": "technical"}')
    payload = {
        "candidate": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
        "position": "Backend Developer",
        "history": []
    }
    response = client.post("/aeon/question", json=payload)
    assert response.status_code == 200
    data = response.json()
    assert data["question"]
    assert data["type"] == "technical"

def test_aeon_summary(monkeypatch):
    mock_openai(monkeypatch, '{"glyph": "üß¨", "summary": "–ö–∞–Ω–¥–∏–¥–∞—Ç –ø—Ä–æ—è–≤–∏–ª —Å–µ–±—è –æ—Ç–ª–∏—á–Ω–æ", "recommendation": "–ë—Ä–∞—Ç—å"}')
    payload = {
        "candidate": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
        "position": "Backend Developer",
        "history": [
            {"question": "Q1", "answer": "A1"},
            {"question": "Q2", "answer": "A2"}
        ]
    }
    response = client.post("/aeon/summary", json=payload)
    assert response.status_code == 200
    data = response.json()
    assert "glyph" in data
    assert "summary" in data
    assert "recommendation" in data

def test_aeon_task(monkeypatch):
    mock_openai(monkeypatch, '{"task": "–°–¥–µ–ª–∞—Ç—å API", "example": "–ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞"}')
    payload = {
        "candidate": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
        "position": "Backend Developer"
    }
    response = client.post("/aeon/task", json=payload)
    assert response.status_code == 200
    data = response.json()
    assert "task" in data
    assert "example" in data

def test_token_expiry_and_reuse():
    # –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é
    response = client.post("/session")
    token = response.json()["token"]

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    from app.api import sessions
    sessions[token]["created_at"] -= timedelta(hours=2)

    # –õ—é–±–æ–π –∑–∞–ø—Ä–æ—Å —Å –∏—Å—Ç—ë–∫—à–∏–º —Ç–æ–∫–µ–Ω–æ–º ‚Äî 403
    r = client.post(f"/session/{token}/answer", json={"question_id": 1, "answer_id": 2})
    assert r.status_code == 403
    assert "–∏—Å—Ç—ë–∫" in r.json()["detail"]

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    response = client.post("/session")
    token2 = response.json()["token"]
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
    r = client.post(f"/session/{token2}/complete")
    assert r.status_code == 200
    # –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ
    r = client.post(f"/session/{token2}/answer", json={"question_id": 1, "answer_id": 2})
    assert r.status_code == 403
    assert "–∑–∞–≤–µ—Ä—à—ë–Ω" in r.json()["detail"]